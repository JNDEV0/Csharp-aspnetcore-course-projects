{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "Default": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=CitiesDb;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"
  },
  //origins are related to CORS policies, see Program.cs
  //having origins stipulated in stored variables is useful to centralize and edit/change according to current evinronment, dev,staging,production
  "AllowedOrigins": [
    "http://remoteallowedclient.com",
    "Https://remoteallowed.com:4766",
    "..."
  ],
  "AllowedOrigins2": [
    "http://remoteallowedclient.com",
    "Https://localhost:5001",
    "..."
  //aditional CORS policy might use additional stored KVP set of origins stored here ie: "AllowedOrigins2": [...]
  //or even create separate sets of allowed origins for specific controllers/actionmethods
  ],
  "Jwt": {
    //the issuer and audience stipulate from where a token is issued/created and what domain:portIfAny can SENDIN the token in a request
    //if this is a live app, and domain coolwebsite.com is where clients will access, that is the audience
    //in development localhost is used, but this will break any auth-required routes until updated in production
    "Issuer": "https://localhost:7190/", //VERY IMPORTANT SETTING
    "Audience": "https://localhost:7190/", //VERY IMPORTANT SETTING
    "EXPIRATION_MINUTES": 1, //adjusted lower token expiration, so that token refresh will keep the token renewed, jwt token expiration should be short
    "SecretKey": "hard to guess server only secret string, used to encrypt the runtime data points that are combined and encoded, this key needs to be secure and appsettings.json is not the right place for it, its here for example brevity, in production it would be an env variable on the server OS for secure storage. the secret is used to generate the jwt each request, the generated token is compared with incoming request tokento determine validity and not expired"
  },
  "RefreshToken": {
    "EXPIRATION_MINUTES": 10,
  }
}
