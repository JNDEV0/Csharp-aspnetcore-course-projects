@*
    the partial view can read the viewData that is passed to the view from the controller
    HOWEVER the partialViewData is a COPY of viewData, so changes to partialViewData will not
    affect viewData in the overall view, so preferrably only read from partialViewData

    this allows partial views to receive data from the overall view, 
    allowing dynamic conditional content
    note that the controller is passing the copy of the object to this partial list
    and that ViewBag and ViewData access the same data

    also note this using and model directives that enable the use of @Model. object
    instead of ViewBag or ViewData, using model bound data passed to the partial view
    by the parent view. this is useful for standardizing expected input data for partial views
*@
@using PartialViews.Models;
@model CityListModel;


<div class="list-container">
    <h3>@ViewBag.ListTitle</h3>
    <ul class="list">
        @{
            if (Model is not null)
            {
                //Model should always be null checked, will throw exception if null
                //in this project some partial view calls do provide model others dont,
                //without this verification this would throw compile NullReferenceException
                //Model.ListTitle, Model.Cities
            }
            foreach (string city in ViewBag.Cities)
        {
        <li>@city</li>
        }
    }
    </ul>
</div>